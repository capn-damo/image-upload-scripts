#!/bin/bash
##
## scrotcloud

########################################################################
#
### REQUIRES:  yad, jq, xprop, wmctrl, wget, curl, scrot, xdotool,
#               convert(in imagemagick package), gio(in gvfs package)
#
########################################################################

URL="https://scrot.cloud"
#export API_URL="https://api.imgbb.com/"   # used by run_browser()

export BL_YAD_INCLUDES='/usr/lib/bunsen/common/yad-includes' 
USR_CFG_DIR="$HOME/.config/scrotcloud"
SETTINGS_FILE="${USR_CFG_DIR}/settings.conf"
SCRIPT=$(basename "$0")
export IMG_VIEWER="x-www-browser"   # used by show_image()

#export IMG_VIEWER
#### YAD ###
DIALOG="yad --center --borders=20 --window-icon=distributor-logo-bunsenlabs --fixed"
TITLE="--title=Image BBCode"
T="--text="
DELETE="--button=Delete:2"
CLOSE="--button=gtk-close:1"
CANCEL="--button=gtk-cancel:1"
OK="--button=OK:0"

### required programs ###
declare -a APPS
APPS=( "yad" "xprop" "wmctrl" "wget" "curl" "scrot" "gio" "xdotool" "convert" )

### FUNCTIONS  #########################################################
### Get script args ###
function getargs(){
    while [[ ${#} != 0 ]]; do
        case "$1" in
            -h | --help)    echo -e "\n${USAGE}\n"
                            exit 0
                            ;;
            -s | --select)  SCROT="${SCREENSHOT_SELECT_COMMAND}"
                            ;;
            -w | --window)  SCROT="${SCREENSHOT_WINDOW_COMMAND}"
                            ;;
            -f | --full)    SCROT="${SCREENSHOT_FULL_COMMAND}"
                            ;;
            -d | --delay)   if [[ $2 != ?(-)+([0-9]) ]];then
                                message="\n\tDelay value must be an integer\n\tExiting script...\n"
                                echo -e "${message}"
                                yad_error "${message}"
                                exit 1
                            else
                                DELAY="$2"
                            fi
                            shift
                            ;;
            --file)         FNAME="$2"
                            shift
                            F_FLAG=1
                            ;;
                         *) message="\n\tFailed to parse options\n\tExiting script...\n"
                            echo -e "${message}" >&2
                            yad_error "${message}"
                            exit 1
                            ;;
        esac || { echo "Failed to parse options" >&2 && exit 1; }
        shift
    done
}
### Initialize settings.conf config  ###
function settings_conf(){
    ! [[ -d "${USR_CFG_DIR}" ]] && mkdir -p "${USR_CFG_DIR}" 2>/dev/null

    if ! [[ -f "${SETTINGS_FILE}" ]] 2>/dev/null;then
        touch "${SETTINGS_FILE}" && chmod 600 "${SETTINGS_FILE}"
        cat <<EOF > "${SETTINGS_FILE}"
### IMGUR SCREENSHOT DEFAULT CONFIG ####
### Read by ${SCRIPT} ###################
# Most of these settings can be overridden with script args

SCROTCLOUD_USER=""

IMG_VIEWER=""
BROWSER=""

# Local file settings
# User directory to save image:
FILE_DIR="$(xdg-user-dir PICTURES)"
FILE_NAME="scrotcloud-%Y_%m_%d-%H:%M:%S"
# possible formats are png | jpg | tif | gif | bmp | webp
FILE_FORMAT="png"   

# Screenshot scrot commands
SCREENSHOT_SELECT_COMMAND="scrot -s "
SCREENSHOT_WINDOW_COMMAND="scrot -u -b "
SCREENSHOT_FULL_COMMAND="scrot "

EOF
    fi
    source "${SETTINGS_FILE}"
}
### Check required programs are installed ###
function check_required(){
    local message
    declare -a BAD_APPS # array to hold missing commands

    [[ -z "${IMG_VIEWER}" ]] && IMG_VIEWER="x-www-browser"
    
    APPS+=( "${IMG_VIEWER}" )
    
    for app in "${APPS[@]}";do
        if type "${app}" >/dev/null 2>&1;then
            continue
        else
            echo >&2 "${app} not installed."
            BAD_APPS+=( "${app}" )
        fi
    done
    
    if (( ${#BAD_APPS[@]} > 0 ));then
        message="\n  You need to install\n"
        for app in "${BAD_APPS[@]}";do
            message="${message}  "\'"${app}"\'","
        done
        message="${message}\n  before proceeding.\n"
        echo -e "${message}"
        yad_error "${message}"
        exit
    fi
}

### File and Image functions ###
function getimage(){
    local message ret
    
    if ! [[ -z ${DELAY} ]] 2>/dev/null && ! [[ ${SCROT} == "${SCREENSHOT_SELECT_COMMAND}" ]] 2>/dev/null;then
        SCROT="${SCROT} -d ${DELAY} "
        message="\n\tNo image file provided...\n\tProceed with screenshot?\n \
        \n\tThere will be a pause of ${DELAY}s, to select windows etc\n"
    else
        SCROT="${SCROT} -d 1 "   # need a pause so YAD dialog can leave the scene
        message="\n\tNo image file provided...\n\tProceed with screenshot?\n"
    fi

    if [[ -z "$1" ]] 2>/dev/null; then
        yad_common_args+=("--image=dialog-question")
        yad_question "${message}"
        ret="$?"
        yad_common_args+=("--image=0")
        
        yad_common_args+=("--image=dialog-info")
        if (( ret == 1 ));then
            exit 0
        elif (( ret == 0 )) && [[ ${SCROT} == *"-s"* ]];then            # scrot command contains "-s"
            yad_info "\n\tDrag cursor to select area for screenshot\n"  # to select area
        elif (( ret == 0 )) && [[ ${SCROT} == *"-u"* ]];then            # scrot command contains "-u" 
            yad_info "\n\tSelect window to be Active, then click 'OK'\n" #for active window
        fi
        yad_common_args+=("--image=0")

        # new filename with date
        img_file="$(date +"${FILE_NAME}.${FILE_FORMAT}")"
        img_file="${FILE_DIR}/${img_file}" && export img_file
        take_screenshot "${img_file}"
    else
        # upload file instead of screenshot
        img_file="$1"
    fi
    
    # check if file exists
    if ! [[ -f "${img_file}" ]] 2>/dev/null; then
        message="\n\tfile '${img_file}' doesn't exist!\n\n\tExiting script...\n"
        echo -e "${message}"
        yad_error "${message}"
        exit 1
    fi
}

function delete_image() {   # Open imgbb in browser at image to be deleted
    ${browser_cmd} "${del_url}"
    switch_to_active
}

function delete_local(){    # delete local screenshot; don't delete if --file was script arg.
    local message ret
    source "${BL_YAD_INCLUDES}"
   
    if (( F_FLAG == 0));then    # local file wasn't uploaded, so don't offer to delete
        message="\n\tMove local screenshot image to 'Trash'?\n\n\t${img_file}\n"
        yad_common_args+=("--image=dialog-question")
        yad_question "${message}"
        ret="$?"
        yad_common_args+=("--image=0")
        if (( ret == 0 )); then
            if type "/usr/bin/gio" > /dev/null;then # 'gio' is part of 'gvfs' package
                gio trash "${img_file}"
            else
                rm "${img_file}"
            fi
        fi
    fi
}

function take_screenshot() {
    local cmd_scrot shot_err message
    
    cmd_scrot="${SCROT}$1"
    shot_err="$(${cmd_scrot}) | xclip -selection clipboard -target image/png" #takes a screenshot
    #ret="$?" && echo "ret= $ret"; exit
    if (( ${ret} != 0 )); then
        message="\n\tFailed to take screenshot of\n\t'$1':\n\n\tError: '${shot_err}'"
        echo -e "${message}"
        yad_error "${message}"
        exit 1
    fi
}

function show_image(){  # display image using viewer set in settings.conf
    "${IMG_VIEWER}" "${img_file}"
    switch_to_active
}

function watermark_thumb() {    # add watermark to thumbnail if uploaded image has been deleted
    local input_img="${thumb_tempfile}"
    local delete_text="$HOME/tmp/deleted.png"

    # create watermark image
    convert  -background transparent -fill red -size 160x60 label:'UPLOAD\n     DELETED' "${delete_text}"
    # overlay thumbnail with watermark
    composite -dissolve 50% -gravity west "${delete_text}" "${thumb_tempfile}" "${thumb_tempfile}"
    
    rm "${delete_text}"
}
### END Image Functions ################################################

function get_username(){
#set -x
    local ret
    
    if [[ -z "${SCROTCLOUD_USER}" ]];then
        dlg=$(${DIALOG} --entry ${T}'Enter your scrot.cloud username...' \
            ${OK} ${CANCEL} ) 2>/dev/null
        ret=$?
        if (( $ret == 0 ));then
            SCROTCLOUD_USER="${dlg}"
        # write user to settings.conf
        # sed: change line containing <string> to <stringvar>
        user_line="SCROTCLOUD_USER="\""${SCROTCLOUD_USER}\""
        while read line;do
            if ! [[ ${line:0:1} == '#' ]];then  # skip line if commented out
                sed -i "s/^SCROTCLOUD_USER.*/${user_line}/" "${SETTINGS_FILE}"
            fi
        done < "${SETTINGS_FILE}"
#set +x
        source "${SETTINGS_FILE}"
        fi
    else
        scrotcloud_url="https://scrot.cloud/${SCROTCLOUD_USER}"
    fi
#    browser_cmd="x-www-browser --new-window"
    #run_browser "${scrotcloud_url}"
}

function run_browser(){     # run browser with API url, and switch to attention-seeking browser tab

        ${browser_cmd} "${URL}/${SCROTCLOUD_USER}" 2>/dev/null

    switch_to_active
}

function switch_to_active(){   # switch to new window
    local id
    for id in $(wmctrl -l | awk '{ print $1 }'); do
        # filter only windows demanding attention 
        xprop -id "$id" | grep -q "_NET_WM_STATE_DEMANDS_ATTENTION"
        if (( $? == 0 )); then
            wmctrl -i -a "$id"
        fi
    done
}

function main(){
set -x
    settings_conf   # set up settings.conf if necessary
    get_username #&& exit
    # set defaults, if login not specified in script args
    SCROT="${SCREENSHOT_FULL_COMMAND}"        

    export -f run_browser   # to be used as YAD button command
    export -f switch_to_active # switch to active window
    export -f show_image        # to be used as YAD button command
    
    # Set browser command
    if ! [[ -z "${BROWSER}" ]];then
        browser_cmd="${BROWSER} --new-window "
    else
        browser_cmd="x-www-browser --new-window "
    fi


    if ! . "${BL_YAD_INCLUDES}" 2> /dev/null; then
        echo "Error: Failed to source yad-includes in ${BL_YAD_INCLUDES}" >&2
        exit 1
    elif ! . "${SETTINGS_FILE}" 2> /dev/null; then
        echo "Error: Failed to source ${SETTINGS_FILE} in ${USR_CFG_DIR}/" >&2
        exit 1
    fi
    
    check_required  # check required programs are installed
    
#    [[ -z "${CLIENT_API_KEY}" ]] && get_client_api_key
    getargs "${@}"
    getimage "${FNAME}"

    run_browser
exit
    bb_direct_link="[img]${img_link}[/img]"
    bb_thumb_linked="[url=${img_link}][img]${img_small}[/img][/url]"
    
    # download image thumbnail, for display in YAD dialog
    thumb_tempfile="${HOME}/tmp/thumb.jpg"
    wget -q -O "${thumb_tempfile}" "${img_small}"
    
    # Display BB Codes for uploaded image
    text='
        BB Code - Image thumbnail Linked

        Use Ctrl-C/Ctrl-V to copy/paste the selection

        '
    # Show 'Delete' button until image has been deleted
    # imgbb Image Delete page opens in new browser window, which closes after image deletion.
    while true;do
        if wget --spider "${del_url}" 2>/dev/null; then # page exists
            ret=$(${DIALOG} --image-on-top --image="${thumb_tempfile}" "${TITLE}" \
                --width=680 ${T}"${text}" --text-align=left \
                --form \
                --field='BB Code - Thumbnail linked':TXT "${bb_thumb_linked}" \
                --field='BB Code - Direct image link':TXT "${bb_direct_link}" \
                --button="Show Image":"/bin/bash -c 'show_image'" \
                ${DELETE} ${CLOSE} ) 2>/dev/null 
            ret="$?"
            if (( ret == 2 )); then # block loop until image deletion is confirmed by user
                yad_common_args+=("--on-top" "--image=dialog-info")
                yad_info '
                    Click "Delete image" below the image  
                    on the imgbb page which will open.  
                    
                    Then choose  "Confirm"
                    
                    '
                yad_common_args+=("--on-top"=0 "--image=0")
                delete_image
                dlg=$(${DIALOG} --on-top --undecorated \
                    ${T}"Choose 'OK' when you have confirmed deletion of the image" \
                    ${OK} ${CANCEL} \
                    )
                ret=$?
                if (( $ret == 0 ));then
                    xdotool key ctrl+shift+w            # close browser window
                    watermark_thumb
                    continue
                else
                    xdotool key ctrl+shift+w            # close browser window
                    continue
                fi
            else        # dialog 'Close' chosen
                break
            fi
        else    # Image deletion confirmed, but user may still want to copy/paste BBCode
                # or view the image
            ret=$(${DIALOG} --image-on-top --image="${thumb_tempfile}" "${TITLE}" \
            --width=680 ${T}"${text}" --text-align=left \
            --form \
            --field='BB Code - Thumbnail linked':TXT "${bb_thumb_linked}" \
            --field='BB Code - Direct image link':TXT "${bb_direct_link}" \
            --button="Show Image":"/bin/bash -c 'show_image'" \
            ${CLOSE}  \
            ) 2>/dev/null
            break
        fi
        #break
    done
    delete_local
    rm "${thumb_tempfile}" 2>/dev/null
}
### END FUNCTIONS ######################################################

main "$@"
exit
